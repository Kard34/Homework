#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<time.h>
#include<string>
#include<conio.h>
#include<iostream>
#include<windows.h>

using namespace std;

#define screen_x 100
#define screen_y 31

HANDLE wHnd;
COORD bufferSize = { screen_x,screen_y };
SMALL_RECT windowSize = { 0,0,screen_x - 1,screen_y - 1 };

int setConsole() {
	wHnd = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleWindowInfo(wHnd, TRUE, &windowSize);
	SetConsoleScreenBufferSize(wHnd, bufferSize);
	return 0;
}

void gotoxy(int x, int y) {
	COORD c = { x,y };
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), c);
}

void setcursor(bool visible) {
	HANDLE console = GetStdHandle(STD_OUTPUT_HANDLE);
	CONSOLE_CURSOR_INFO lpCursor;
	lpCursor.bVisible = visible;
	lpCursor.dwSize = 20;
	SetConsoleCursorInfo(console, &lpCursor);
}

void game_border() {
	int x = 60, y = 30;
	char Line[] = "*-|";
	gotoxy(0, 0);
	printf("%c", Line[0]);
	for (int i = 0; i < x; i++) printf("%c", Line[1]);
	printf("%c\n", Line[0]);
	for (int i = 0; i < y - 2; i++) {
		printf("%c", Line[2]);
		for (int j = 0; j < x; j++) printf("%c", ' ');
		printf("%c\n", Line[2]);
	}
	printf("%c", Line[0]);
	for (int i = 0; i < x; i++) printf("%c", Line[1]);
	printf("%c\n", Line[0]);
}

void spacerunner() {
	game_border();
	int x, y;
	x = 3, y = 3;
	gotoxy(x, y);
	printf(" /////");
	gotoxy(x, ++y);
	printf("//   //");
	gotoxy(x, ++y);
	printf("//      //////   /////   /////   /////");
	gotoxy(x, ++y);
	printf(" /////  //   //      // //   // //   //");
	gotoxy(x, ++y);
	printf("     // //   //  ////// //      ///////");
	gotoxy(x, ++y);
	printf("//   // //   // //   // //   // //");
	gotoxy(x, ++y);
	printf(" /////  //////   //////  /////   /////");
	gotoxy(x, ++y);
	printf("        //");
	gotoxy(x, ++y);
	printf("        //");
	x = 16, y = 11;
	gotoxy(x, y);
	printf("//////");
	gotoxy(x, ++y);
	printf("//   //");
	gotoxy(x, ++y);
	printf("//   // //   // /////  /////   /////  // //");
	gotoxy(x, ++y);
	printf("//////  //   // //  // //  // //   // ///");
	gotoxy(x, ++y);
	printf("// //   //   // //  // //  // /////// //");
	gotoxy(x, ++y);
	printf("//  //  //   // //  // //  // //      //");
	gotoxy(x, ++y);
	printf("//   //  ////// //  // //  //  /////  //");
	gotoxy(14, 25);
	printf("- Press any button to start game -");
	gotoxy(0, 0);
}

void pause() {
	game_border();
	int x, y;
	x = 12, y = 7;
	gotoxy(x, y);
	printf("//////");
	gotoxy(x, ++y);
	printf("//   //");
	gotoxy(x, ++y);
	printf("//   // /////  //   //  /////   /////");
	gotoxy(x, ++y);
	printf("//////      // //   // //      //   //");
	gotoxy(x, ++y);
	printf("//      ////// //   //  /////  ///////");
	gotoxy(x, ++y);
	printf("//     //   // //   //      // //");
	gotoxy(x, ++y);
	printf("//      //////  ////// /////    /////");
	gotoxy(15, 25);
	printf("- Press any button to continue -");
	gotoxy(0, 0);
}

void draw_ship(int x, int y) {
	gotoxy(x, y);
	printf("<-0->");
}

void erase_ship(int x, int y) {
	gotoxy(x, y);
	printf("     ");
}

void draw_rocket(int x, int y) {
	gotoxy(x, y);
	printf("^");
}

void erase_rocket(int x, int y) {
	gotoxy(x, y);
	printf(" ");
}

typedef struct movingobject {
	int x, y;
	bool state = false;
	char item;
}mo;

mo met[20], mleft[10], mright[10], item[10];

void draw_meteorite(int x, int y) {
	gotoxy(x, y);
	printf("=====");
	gotoxy(x, ++y);
	printf("=====");
	gotoxy(x, ++y);
	printf("=====");
}

void draw_triangle_left_meteorite(int x, int y) {
	gotoxy(x, y);
	printf(">>>>>");
	gotoxy(x, ++y);
	printf(">>>>>");
	gotoxy(x, ++y);
	printf(">>>>>");
}

void draw_triangle_right_meteorite(int x, int y) {
	gotoxy(x, y);
	printf("<<<<<");
	gotoxy(x, ++y);
	printf("<<<<<");
	gotoxy(x, ++y);
	printf("<<<<<");

}

void draw_item(int x, int y, char item) {
	gotoxy(x, y);
	printf("*---*");
	gotoxy(x, ++y);
	printf("| %c |", item);
	gotoxy(x, ++y);
	printf("*---*");
}

void erase_mo(int x, int y) {
	gotoxy(x, y);
	printf("     ");
	gotoxy(x, ++y);
	printf("     ");
	gotoxy(x, ++y);
	printf("     ");
}

bool point_in(int x, int y, int n, int m) {
	for (int i = m; i < m + 3; i++) {
		for (int j = n; j < n + 5; j++) {
			if (x == j && y == i)return 1;
		}
	}
	return 0;
}

void scoring(string playername, int playerscore) {
	FILE* fp;
	struct board {
		string name;
		unsigned int score;
	}b[6];
	b[5].name = playername;
	b[5].score = playerscore;
	fp = fopen("Score.txt", "r");
	for (int i = 0; i < 5; i++) {
		char string_tmp[255];
		fscanf(fp, "%s", &string_tmp);
		b[i].name = string_tmp;
		fscanf(fp, "%d", &b[i].score);
	}
	fclose(fp);
	for (int i = 0; i < 6; i++) {
		for (int j = 0; j < 5 - i; j++) {
			if (b[j].score < b[j + 1].score) {
				unsigned int int_tmp;
				int_tmp = b[j].score;
				b[j].score = b[j + 1].score;
				b[j + 1].score = int_tmp;
				string string_tmp;
				string_tmp = b[j].name;
				b[j].name = b[j + 1].name;
				b[j + 1].name = string_tmp;
			}
		}
	}
	fp = fopen("Score.txt", "w");
	for (int i = 0; i < 5; i++) {
		for (int j = 0; b[i].name[j] != '\0'; j++) {
			fprintf(fp, "%c", b[i].name[j]);
		}
		fprintf(fp, " %d\n", b[i].score);
	}
	fclose(fp);
}

void game_over() {
	game_border();
	int x, y;
	x = 4, y = 3;
	gotoxy(x, y);
	printf(" /////");
	gotoxy(x, ++y);
	printf("//   //");
	gotoxy(x, ++y);
	printf("//       /////  /// //   /////");
	gotoxy(x, ++y);
	printf("//  ///      // // / // //   //");
	gotoxy(x, ++y);
	printf("//   //  ////// // / // ///////");
	gotoxy(x, ++y);
	printf("//   // //   // // / // //");
	gotoxy(x, ++y);
	printf(" /////   ////// // / //  /////");
	x = 29, y = 11;
	gotoxy(x, y);
	printf(" ///// ");
	gotoxy(x, ++y);
	printf("//   //");
	gotoxy(x, ++y);
	printf("//   // //   //  /////  // //");
	gotoxy(x, ++y);
	printf("//   // //   // //   // ///");
	gotoxy(x, ++y);
	printf("//   // //   // /////// //");
	gotoxy(x, ++y);
	printf("//   //  // //  //      //");
	gotoxy(x, ++y);
	printf(" /////    ///    /////  //");
	gotoxy(7, 13);
	printf(" HIGHSCORES");
	x = 5, y = 15;
	FILE* fp;
	struct board {
		string name;
		unsigned int score;
	}b[5];
	fp = fopen("Score.txt", "r");
	for (int i = 0; i < 5; i++) {
		char string_tmp[255];
		fscanf(fp, "%s", &string_tmp);
		b[i].name = string_tmp;
		fscanf(fp, "%d", &b[i].score);
	}
	fclose(fp);
	for (int i = 0; i < 5; i++) {
		gotoxy(x, y);
		cout << i + 1 << ". " << b[i].name;
		gotoxy(x + 10, y);
		cout << b[i].score << endl;
		y++;
	}
}

int main() {
	char c = ' ', direction = ' ';
	int x = 30, y = 25;
	int rx = 0, ry = 0;
	bool rocket = false;
	int met_gap[] = { 0,0,0 };
	int ah = 3, ar = 1;
	size_t score = 0;
	string playername;
	bool quit = false;
	setConsole();
	setcursor(0);
	game_border();
	while (1) {
		spacerunner();
		if (_kbhit()) {
			char t = _getch();
			break;
		}
		fflush(stdin);
	}
	while (!quit) {
		srand(time(NULL));
		game_border();
		c = ' ', direction = ' ';
		x = 30, y = 25;
		rx = 0, ry = 0;
		rocket = false;
		for (int i = 0; i < 3; i++)met_gap[i] = 0;
		ah = 3, ar = 1;
		score = 0;
		for (int i = 0; i < 20; i++)met[i].state = false;
		for (int i = 0; i < 10; i++) {
			mleft[i].state = false;
			mright[i].state = false;
			item[i].state = false;
		}
		gotoxy(65, 2);
		printf("          ");
		gotoxy(65, 4);
		printf("   ", ah);
		gotoxy(65, 6);
		printf("   ", ar);
		do {
			if (met_gap[0]++ == 4) {
				met_gap[0] = 0;
				int ran = rand() % 100;
				if (ran < 5) {
					for (int i = 0; i < 10; i++) {
						if (!item[i].state) {
							item[i].state = true;
							item[i].x = 1 + (rand() % 54);
							item[i].y = 1;
							int it = rand() % 2;
							if (it == 0)item[i].item = 'H';
							else item[i].item = 'R';
							draw_item(item[i].x, item[i].y, item[i].item);
							break;
						}
					}
				}
				else {
					for (int i = 0; i < 20; i++) {
						if (!met[i].state) {
							met[i].state = true;
							met[i].x = 1 + (rand() % 54);
							met[i].y = 1;
							draw_meteorite(met[i].x, met[i].y);
							break;
						}
					}
				}
			}
			if (met_gap[1]++ == 10) {
				met_gap[1] = 0;
				for (int i = 0; i < 10; i++) {
					if (!mleft[i].state) {
						int ran = rand() % 2;
						mleft[i].state = true;
						if (ran) {
							mleft[i].x = 3;
							mleft[i].y = 1 + (rand() % 10);
						}
						else {
							mleft[i].x = 1 + (rand() % 45);
							mleft[i].y = 1;
						}
						draw_triangle_left_meteorite(mleft[i].x, mleft[i].y);
						break;
					}
				}
			}
			if (met_gap[2]++ == 10) {
				met_gap[2] = 0;
				for (int i = 0; i < 10; i++) {
					if (!mright[i].state) {
						int ran = rand() % 2;
						mright[i].state = true;
						if (ran) {
							mright[i].x = 55;
							mright[i].y = 1 + (rand() % 10);
						}
						else {
							mright[i].x = 55 - (rand() % 40);
							mright[i].y = 1;
						}
						draw_triangle_right_meteorite(mright[i].x, mright[i].y);
						break;
					}
				}
			}
			if (_kbhit()) {
				c = _getch();
				if (c == 'w')direction = 'w';
				else if (c == 's')direction = 's';
				else if (c == 'a')direction = 'a';
				else if (c == 'd')direction = 'd';
				else if (c == 'r' && !rocket && ar) {
					rocket = true;
					rx = x + 2;
					ry = y - 2;
					ar = 0;
					draw_rocket(rx, ry);
				}
				else if (c == 'p') {
					pause();
					direction = ' ';
					while (1) {
						if (_kbhit()) {
							c = _getch();
							game_border();
							break;
						}
					}
					c = ' ';
				}
				else direction = ' ';
				fflush(stdin);
			}
			if (direction == 'w' && y - 1 >= 1) {
				erase_ship(x, y);
				draw_ship(x, --y);
			}
			else if (direction == 's' && y + 1 <= 28) {
				erase_ship(x, y);
				draw_ship(x, ++y);
			}
			else if (direction == 'a' && x - 1 >= 1) {
				erase_ship(x, y);
				draw_ship(--x, y);
			}
			else if (direction == 'd' && x + 1 <= 56) {
				erase_ship(x, y);
				draw_ship(++x, y);
			}
			if (rocket) {
				if (ry == 1) {
					erase_rocket(rx, ry);
					rocket = false;
					rx = 0;
					ry = 0;
				}
				else {
					erase_rocket(rx, ry);
					draw_rocket(rx, --ry);
				}
			}
			for (int i = 0; i < 10; i++) {
				if (mleft[i].state) {
					if (mleft[i].x + 5 == 60 || mleft[i].y + 1 == 27) {
						erase_mo(mleft[i].x, mleft[i].y);
						mleft[i].state = false;
					}
					else {
						for (int j = 0; j < 5; j++) {
							if (point_in(x + j, y, mleft[i].x, mleft[i].y)) {
								erase_mo(mleft[i].x, mleft[i].y);
								mleft[i].state = false;
								ah--;
								break;
							}
						}
						if (rx != 0 && ry != 0) {
							if (point_in(rx, ry, mleft[i].x, mleft[i].y)) {
								erase_mo(mleft[i].x, mleft[i].y);
								mleft[i].state = false;
								rocket = false;
								rx = 0;
								ry = 0;
							}
						}
						if (mleft[i].state) {
							erase_mo(mleft[i].x, mleft[i].y);
							draw_triangle_left_meteorite(++mleft[i].x, ++mleft[i].y);
						}
					}
				}
			}
			for (int i = 0; i < 10; i++) {
				if (mright[i].state) {
					if (mright[i].x - 1 == 1 || mright[i].y + 1 == 27) {
						erase_mo(mright[i].x, mright[i].y);
						mright[i].state = false;
					}
					else {
						for (int j = 0; j < 5; j++) {
							if (point_in(x + j, y, mright[i].x, mright[i].y)) {
								erase_mo(mright[i].x, mright[i].y);
								mright[i].state = false;
								ah--;
								break;
							}
						}
						if (rx != 0 && ry != 0) {
							if (point_in(rx, ry, mright[i].x, mright[i].y)) {
								erase_mo(mright[i].x, mright[i].y);
								mright[i].state = false;
								rocket = false;
								rx = 0;
								ry = 0;
							}
						}
						if (mright[i].state) {
							erase_mo(mright[i].x, mright[i].y);
							draw_triangle_right_meteorite(--mright[i].x, ++mright[i].y);
						}
					}
				}
			}
			for (int i = 0; i < 20; i++) {
				if (met[i].state) {
					if (met[i].y + 1 == 27) {
						erase_mo(met[i].x, met[i].y);
						met[i].state = false;
					}
					else {
						for (int j = 0; j < 5; j++) {
							if (point_in(x + j, y, met[i].x, met[i].y)) {
								erase_mo(met[i].x, met[i].y);
								met[i].state = false;
								ah--;
								break;
							}
						}
						if (rx != 0 && ry != 0) {
							if (point_in(rx, ry, met[i].x, met[i].y)) {
								erase_mo(met[i].x, met[i].y);
								met[i].state = false;
								rocket = false;
								rx = 0;
								ry = 0;
							}
						}
						if (met[i].state) {
							erase_mo(met[i].x, met[i].y);
							draw_meteorite(met[i].x, ++met[i].y);
						}
					}
				}
			}
			for (int i = 0; i < 10; i++) {
				if (item[i].state) {
					if (item[i].y + 1 == 27) {
						erase_mo(item[i].x, item[i].y);
						item[i].state = false;
					}
					else {
						for (int j = 0; j < 5; j++) {
							if (point_in(x + j, y, item[i].x, item[i].y)) {
								erase_mo(item[i].x, item[i].y);
								item[i].state = false;
							}
						}
						if (rx != 0 && ry != 0) {
							if (point_in(rx, ry, item[i].x, item[i].y)) {
								erase_mo(item[i].x, item[i].y);
								item[i].state = false;
								rocket = false;
								rx = 0;
								ry = 0;
							}
						}
						if (item[i].state) {
							erase_mo(item[i].x, item[i].y);
							draw_item(item[i].x, ++item[i].y, item[i].item);
						}
						else {
							if (item[i].item == 'R')ar = 1;
							else if (item[i].item == 'H' && ah < 5)ah++;
						}
					}
				}
			}
			gotoxy(65, 1);
			printf("Score");
			gotoxy(65, 2);
			printf("%d", score++);
			gotoxy(65, 3);
			printf("Health");
			gotoxy(65, 4);
			printf("%d", ah);
			gotoxy(65, 5);
			printf("Rocket");
			gotoxy(65, 6);
			printf("%d", ar);
			draw_ship(x, y);
			Sleep(100);
		} while (ah > 0);
		game_over();
		Sleep(100);
		gotoxy(12, 22);
		setcursor(1);
		printf("Enter your name : ");
		cin >> playername;
		scoring(playername, score);
		setcursor(0);
		gotoxy(12, 27);
		printf("Restart");
		gotoxy(42, 27);
		printf("Quit");
		int cx = 10, cy = 27;
		do {
			gotoxy(cx, cy);
			printf("->");
			if (_kbhit()) {
				c = _getch();
				if (c == 'a') {
					gotoxy(cx, cy);
					printf("  ");
					cx = 10;
					quit = false;
				}
				else if (c == 'd') {
					gotoxy(cx, cy);
					printf("  ");
					cx = 40;
					quit = true;
				}
			}
		} while (c != ' ');
	}
	return 0;
}
