#include<stdio.h>
#include<time.h>
#include<conio.h>
#include<windows.h>

#define screen_x 100
#define screen_y 31

HANDLE wHnd;
COORD bufferSize = { screen_x,screen_y };
SMALL_RECT windowSize = { 0,0,screen_x - 1,screen_y - 1 };

int setConsole() {
	wHnd = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleWindowInfo(wHnd, TRUE, &windowSize);
	SetConsoleScreenBufferSize(wHnd, bufferSize);
	return 0;
}

void gotoxy(int x, int y) {
	COORD c = { x,y };
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), c);
}
//Movecursor
void setcursor(bool visible) {
	HANDLE console = GetStdHandle(STD_OUTPUT_HANDLE);
	CONSOLE_CURSOR_INFO lpCursor;
	lpCursor.bVisible = visible;
	lpCursor.dwSize = 20;
	SetConsoleCursorInfo(console, &lpCursor);
}
//set Visible/Invisible cursor
void border() {
	gotoxy(0, 0);
	int x = 61, y = 30;
	char c = '*', b_1 = '-', b_2 = '|';
	printf("%c", c);
	for (int i = 0; i < x - 2; i++)
		printf("%c", b_1);
	printf("%c\n", c);
	for (int i = 0; i < y - 2; i++) {
		printf("%c", b_2);
		for (int j = 0; j < x - 2; j++)
			printf(" ");
		printf("%c\n", b_2);
	}
	printf("%c", c);
	for (int i = 0; i < x - 2; i++)
		printf("%c", b_1);
	printf("%c\n", c);
}
//border 61*30 (W*H);
void game_border()
{
	gotoxy(0, 0);
	int x = 61, y = 30;
	char c = '*', b_1 = '-', b_2 = '|';
	printf("%c", c);
	for (int i = 0; i < x - 2; i++)
		printf("%c", b_1);
	printf("%c\n", c);
	for (int i = 0; i < y - 2; i++)
	{
		printf("%c", b_2);
		for (int j = 0; j < (x - 4) / 3; j++)
			printf(" ");
		printf("%c", b_2);
		for (int j = 0; j < (x - 4) / 3; j++)
			printf(" ");
		printf("%c", b_2);
		for (int j = 0; j < (x - 4) / 3; j++)
			printf(" ");
		printf("%c\n", b_2);
	}
	printf("%c", c);
	for (int i = 0; i < x - 2; i++)
		printf("%c", b_1);
	printf("%c\n", c);
	gotoxy(0, 0);
}
//border in-game
void start() {
	int x, y;
	border();
	x = 3, y = 3;
	gotoxy(x, y);
	printf(" /////");
	gotoxy(x, ++y);
	printf("//   //");
	gotoxy(x, ++y);
	printf("//      //////   /////   /////   /////");
	gotoxy(x, ++y);
	printf(" /////  //   //      // //   // //   //");
	gotoxy(x, ++y);
	printf("     // //   //  ////// //      ///////");
	gotoxy(x, ++y);
	printf("//   // //   // //   // //   // //");
	gotoxy(x, ++y);
	printf(" /////  //////   //////  /////   /////");
	gotoxy(x, ++y);
	printf("        //");
	gotoxy(x, ++y);
	printf("        //");
	x = 15, y = 11;
	gotoxy(x, y);
	printf("//////");
	gotoxy(x, ++y);
	printf("//   //");
	gotoxy(x, ++y);
	printf("//   // //   // /////  /////   /////  // //");
	gotoxy(x, ++y);
	printf("//////  //   // //  // //  // //   // ///");
	gotoxy(x, ++y);
	printf("// //   //   // //  // //  // /////// //");
	gotoxy(x, ++y);
	printf("//  //  //   // //  // //  // //      //");
	gotoxy(x, ++y);
	printf("//   //  ////// //  // //  //  /////  //");
	gotoxy(13, 25);
	printf("- Press any button to start game -");
	gotoxy(0, 0);
}

void pause() {
	int x, y;
	border();
	x = 12, y = 7;
	gotoxy(x, y);
	printf("//////");
	gotoxy(x, ++y);
	printf("//   //");
	gotoxy(x, ++y);
	printf("//   // /////  //   //  /////   /////");
	gotoxy(x, ++y);
	printf("//////      // //   // //      //   //");
	gotoxy(x, ++y);
	printf("//      ////// //   //  /////  ///////");
	gotoxy(x, ++y);
	printf("//     //   // //   //      // //");
	gotoxy(x, ++y);
	printf("//      //////  ////// /////    /////");
	gotoxy(14, 25);
	printf("- Press any button to continue -");
	gotoxy(0, 0);
}

void game_interface() {
	gotoxy(62, 0);
	printf("Score");
	gotoxy(62, 2);
	printf("Health");
	gotoxy(62, 4);
	printf("Rocket");
	gotoxy(62, 6);
	printf("Barrier");
}

void draw_ship(int x, int y) {
	gotoxy(x, y);
	printf("<-0->");
}

void erase_ship(int x, int y) {
	gotoxy(x, y);
	printf("     ");
}

void draw_rocket(int x, int y) {
	gotoxy(x, y);
	printf("^");
}

void erase_rocket(int x, int y) {
	gotoxy(x, y);
	printf(" ");
}

void draw_barrier(int x, int y)
{
	gotoxy(x, y);
	printf("-------------------");
}

void erase_barrier(int x, int y)
{
	gotoxy(x, y);
	printf("                   ");
}

typedef struct move_object {
	bool status = false;
	int x, y; //Position of object
	char item;
}m_o;

m_o met[15], item[3];

void draw_meteorite(int x, int y) {
	gotoxy(x, y);
	printf("=====");
	gotoxy(x, ++y);
	printf("=====");
	gotoxy(x, ++y);
	printf("=====");
}

void draw_item(int x, int y, char item) {
	gotoxy(x, y);
	printf("*---*");
	gotoxy(x, ++y);
	printf("| %c |", item);
	gotoxy(x, ++y);
	printf("*---*");
}

void erase_mo(int x, int y) {
	gotoxy(x, y);
	printf("     ");
	gotoxy(x, ++y);
	printf("     ");
	gotoxy(x, ++y);
	printf("     ");
}

void reset() {
	for (int i = 0; i < 15; i++) {
		met[i].status = false;
		met[i].x = 0;
		met[i].y = 0;
	}
	for (int i = 0; i < 3; i++) {
		item[i].status = false;
		item[i].x = 0;
		item[i].y = 0;
		item[i].item = ' ';
	}
}

int main() {
	setConsole();
	setcursor(0); //Set cursor to invisible
	int lastlane = -1;
	while (1) {
		srand(time(NULL));
		char c = ' ';
		size_t score = 0, up = 0;
		int level = 1;
		int x = 28, y = 25; //Position of Spaceship
		int rx = 0, ry = 0; //Position of Rocket
		int bx = 0, by = 0; //Position of Barrier
		int ah = 3, ar = 1, ab = 1; // Amount of Health, Rocket, Barrier
		int gap = 0;
		bool rocket = false, barrier = false, stop = false;
		time_t sb, eb;
		start();
		reset();
		while (c == ' ') {
			if (_kbhit()) {
				c = _getch();
			}
			fflush(stdin);
		}
		game_border();
		game_interface();
		draw_ship(x, y);
		gotoxy(62, 1);
		printf("          ");
		do {
			if (level < 5)up++;
			if (up >= 500) {
				up = 0;
				level++;
			}
			if (gap++ >= 8 - level) {
				gap = 0;
				int lane = rand() % 3, ran = rand() % 100; //Item chance 3%
				while (lane == lastlane) lane = rand() % 3;
				lastlane = lane;
				if (ran >= 97 && ran <= 99) {
					for (int i = 0; i < 3; i++) {
						if (item[i].status == false) {
							item[i].status = true;
							item[i].x = (lane * 20) + 8;
							item[i].y = 1;
							if (ran == 97)item[i].item = 'H';
							else if (ran == 98)item[i].item = 'R';
							else if (ran == 99)item[i].item = 'B';
							draw_item(item[i].x, item[i].y, item[i].item);
							break;
						}
					}
				}
				else {
					for (int i = 0; i < 15; i++) {
						if (met[i].status == false) {
							met[i].status = true;
							met[i].x = (lane * 20) + 8;
							met[i].y = 1;
							draw_meteorite(met[i].x, met[i].y);
							break;
						}
					}
				}
			}
			time(&eb);
			if (_kbhit()) {
				c = _getch();
				if (c == 'a' && x - 20 > 0) {
					erase_ship(x, y);
					x -= 20;
					draw_ship(x, y);
				}
				else if (c == 'd' && x + 20 < 60) {
					erase_ship(x, y);
					x += 20;
					draw_ship(x, y);
				}
				else if (c == 'q' && rocket == false && ar == 1) {
					rocket = true;
					rx = x + 2;
					ry = y - 2;
					ar = 0;
					draw_rocket(rx, ry);
				}
				else if (c == 'e' && barrier == false && ab == 1) {
					barrier = true;
					bx = x - 7;
					by = y - 1;
					ab = 0;
					time(&sb);
					draw_barrier(bx, by);
				}
				else if (c == 'p') {
					stop = true;
					pause();
				}
			}
			while (c == 'p') {
				if (_kbhit()) {
					c = _getch();
					system("cls");
					game_border();
					game_interface();
					draw_ship(x, y);
				}
				fflush(stdin);
			}
			fflush(stdin);
			if (rocket == true) {
				if (ry == 1) {
					rocket = false;
					erase_rocket(rx, ry);
				}
				else {
					erase_rocket(rx, ry);
					draw_rocket(rx, --ry);
				}
			}
			if (barrier == true && eb - sb == 5) {
				barrier = false;
				erase_barrier(bx, by);
				bx = 0, by = 0;
			}
			for (int i = 0; i < 3; i++) {
				if (item[i].status == true) {
					if (item[i].x + 2 == rx && (item[i].y + 2 == ry || item[i].y + 1 == ry || item[i].y == ry)) {
						rocket = false;
						item[i].status = false;
						erase_mo(item[i].x, item[i].y);
						erase_rocket(rx, ry);
						rx = 0, ry = 0;
						if (item[i].item == 'H' && ah < 3)ah++;
						else if (item[i].item == 'R' && ar == 0)ar = 1;
						else if (item[i].item == 'B' && ab == 0) ab = 1;
					}
					else if (item[i].y + 4 == 30) {
						item[i].status = false;
						erase_mo(item[i].x, item[i].y);
					}
					else if ((item[i].x - 7 == bx && item[i].y + 3 == by) || (item[i].x == x && (item[i].y + 2 == y || item[i].y + 1 == y || item[i].y == y))) {
						item[i].status = false;
						erase_mo(item[i].x, item[i].y);
						draw_ship(x, y);
						if (item[i].item == 'H' && ah < 3)ah++;
						else if (item[i].item == 'R' && ar == 0)ar = 1;
						else if (item[i].item == 'B' && ab == 0) ab = 1;
					}
					else {
						erase_mo(item[i].x, item[i].y);
						draw_item(item[i].x, ++item[i].y, item[i].item);
					}
				}
			}
			for (int i = 0; i < 15; i++) {
				if (met[i].status == true) {
					if (met[i].x + 2 == rx && (met[i].y + 2 == ry || met[i].y + 1 == ry || met[i].y == ry)) {
						rocket = false;
						met[i].status = false;
						erase_mo(met[i].x, met[i].y);
						erase_rocket(rx, ry);
						rx = 0, ry = 0;
					}
					else if (met[i].y + 4 == 30 || (met[i].x - 7 == bx && met[i].y + 3 == by)) {
						met[i].status = false;
						erase_mo(met[i].x, met[i].y);
					}
					else if ((met[i].y + 2 == y || met[i].y + 1 == y || met[i].y == y) && met[i].x == x) {
						met[i].status = false;
						erase_mo(met[i].x, met[i].y);
						draw_ship(x, y);
						ah--;
					}
					else {
						erase_mo(met[i].x, met[i].y);
						draw_meteorite(met[i].x, ++met[i].y);
					}
				}
			}
			gotoxy(62, 1);
			printf("%d", ++score);
			gotoxy(62, 3);
			printf("%d", ah);
			gotoxy(62, 5);
			printf("%d", ar);
			gotoxy(62, 7);
			printf("%d", ab);
			Sleep(100);
		} while (c != 'x' && ah > 0);
	}
	gotoxy(0, 30);
	return 0;
}
