#include <iostream>
#include <time.h>
#include <conio.h>
#include <windows.h>

using namespace std;

void setcursor(bool visible)
{
    HANDLE console = GetStdHandle(STD_OUTPUT_HANDLE);
    CONSOLE_CURSOR_INFO lpCursor;
    lpCursor.bVisible = visible;
    lpCursor.dwSize = 20;
    SetConsoleCursorInfo(console, &lpCursor);
}

void setcolor(int fg, int bg)
{
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, bg * 16 + fg);
}

void gotoxy(int x, int y)
{
    COORD c = { x, y };
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), c);
}

void draw_border()
{
    int x = 61, y = 30; //border 61*30 (W*H);
    char c = '*', b_1 = '-', b_2 = '|';
    cout << c;
    for (int i = 0; i < x - 2; i++)
        cout << b_1;
    cout << c << endl;
    for (int i = 0; i < y - 2; i++)
    {
        cout << b_2;
        for (int j = 0; j < (x - 4) / 3; j++)
            cout << " ";
        cout << b_2;
        for (int j = 0; j < (x - 4) / 3; j++)
            cout << " ";
        cout << b_2;
        for (int j = 0; j < (x - 4) / 3; j++)
            cout << " ";
        cout << b_2 << endl;
    }
    cout << c;
    for (int i = 0; i < x - 2; i++)
        cout << b_1;
    cout << c << endl;
}

void draw_ship(int x, int y)
{
    gotoxy(x, y);
    cout << "<-0->";
}

void erase_ship(int x, int y)
{
    gotoxy(x, y);
    cout << "     ";
}

void draw_rocket(int x, int y)
{
    gotoxy(x, y);
    cout << "^";
}

void erase_rocket(int x, int y)
{
    gotoxy(x, y);
    cout << " ";
}

void draw_barrier(int x, int y)
{
    gotoxy(x, y);
    cout << "-------------------";
}

void erase_barrier(int x, int y)
{
    gotoxy(x, y);
    cout << "                   ";
}

void draw_meteorite(int x, int y)
{
    gotoxy(x, y);
    cout << "=====";
    gotoxy(x, ++y);
    cout << "=====";
    gotoxy(x, ++y);
    cout << "=====";
}

void erase_meteorite(int x, int y)
{
    gotoxy(x, y);
    cout << "     ";
    gotoxy(x, ++y);
    cout << "     ";
    gotoxy(x, ++y);
    cout << "     ";
}

typedef struct meteorite
{
    bool st = false;
    int x, y;
} m;

void draw_item(int x, int y)
{
    gotoxy(x, y);
    cout << "=====";
    gotoxy(x, ++y);
    cout << "= I =";
    gotoxy(x, ++y);
    cout << "=====";
}

void erase_item(int x, int y)
{
    gotoxy(x, y);
    cout << "     ";
    gotoxy(x, ++y);
    cout << "     ";
    gotoxy(x, ++y);
    cout << "     ";
}

int main()
{
    int x = 28, y = 25, rx = 0, ry = 0, bx = 0, by = 0;
    char c = ' ';
    time_t start, end;
    bool rocket = false, barrier = false;
    m met[5];
    srand(time(NULL));
    setcursor(0);
    draw_border();
    draw_ship(x, y);
    int j = 0;
    do
    {
        if (j == 5)
        { //RandomMeteorite //GapforMeteorite
            j = 0;
            int m = rand() % 3;
            for (int i = 0; i < 5; i++)
            {
                if (met[i].st == false)
                {
                    met[i].st = true;
                    if (m == 0)
                    {
                        draw_meteorite(8, 1);
                        met[i].x = 8;
                        met[i].y = 1;
                    }
                    else if (m == 1)
                    {
                        draw_meteorite(28, 1);
                        met[i].x = 28;
                        met[i].y = 1;
                    }
                    else if (m == 2)
                    {
                        draw_meteorite(48, 1);
                        met[i].x = 48;
                        met[i].y = 1;
                    }
                    break;
                }
            }
        }
        time(&end);
        if (_kbhit())
        {
            c = _getch();
            if (c == 'a')
            { //Left
                if (x - 20 > 0)
                {
                    erase_ship(x, y);
                    x -= 20;
                    draw_ship(x, y);
                }
            }
            else if (c == 'd')
            { //Right
                if (x + 20 < 60)
                {
                    erase_ship(x, y);
                    x += 20;
                    draw_ship(x, y);
                }
            }
            else if (c == 'q' && rocket == false)
            { //Rocket
                rocket = true;
                rx = x + 2;
                ry = y - 2;
                draw_rocket(rx, ry);
            }
            else if (c == 'e' && barrier == false)
            { //Barrier
                time(&start);
                barrier = true;
                bx = x - 7;
                by = y - 1;
                draw_barrier(bx, by);
            }
        }
        if (rocket == true)
        { //RocketMove
            if (ry == 1)
            {
                rocket = false;
                erase_rocket(rx, ry);
            }
            else
            {
                erase_rocket(rx, ry);
                draw_rocket(rx, --ry);
            }
        }
        if (barrier == true && end - start == 5)
        { //BarrierCountdown
            barrier = false;
            erase_barrier(bx, by);
            by = 30;
        }
        for (int i = 0; i < 5; i++)
        { //MeteoriteMove
            if (met[i].st == true)
            {
                if (met[i].x + 2 == rx && (met[i].y + 4 == ry || met[i].y + 3 == ry || met[i].y + 2 == ry))
                {
                    rocket = false;
                    met[i].st = false;
                    erase_meteorite(met[i].x, met[i].y);
                    erase_rocket(rx, ry);
                    rx = 0;
                    ry = 0;
                }
                else if (met[i].y + 4 == 30 || (met[i].x - 7 == bx && met[i].y + 4 == by))
                {
                    met[i].st = false;
                    erase_meteorite(met[i].x, met[i].y);
                }
                else
                {
                    erase_meteorite(met[i].x, met[i].y);
                    draw_meteorite(met[i].x, ++met[i].y);
                }
            }
        }
        j++;
        Sleep(100);
    } while (c != 'x');
    gotoxy(0, 30);
    return 0;
}
